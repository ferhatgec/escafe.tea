[[ stl ]]

// escape.tea
//
// MIT License
//
// Copyright (c) 2021 Ferhat Geçdoğan All Rights Reserved.
// Distributed under the terms of the MIT License.
//
//

import tea.green.string

`set seq = "\x1b"

module escape {
    fn escape#run(data: string) = string {
        var mut __data : string = ""
        var mut collect: string = ""

        var mut is_escape = false
        var mut is_ansi   = false

        for &ch in data {
            if !is_ansi && !str#is_empty(collect) {
                if collect == "x1b" {
                    [[ cpp ]] {
                        cpp_str::append(__data, seq);
                    }
                }

                [[ cpp ]] {
                    cpp_str::erase(collect);
                }
            }

            if is_escape {
                if ch == '\'' {
                    cpp_str#push_back(
                        __data, '\''
                    ) is_escape = false
                } else if ch == '"' {
                    cpp_str#push_back(
                        __data, '\"'
                    ) is_escape = false
                } else if ch == '?' {
                    cpp_str#push_back(
                        __data, '\?'
                    ) is_escape = false
                } else if ch == '\\' {
                    cpp_str#push_back(
                        __data, '\\'
                    ) is_escape = false
                } else if ch == 'a' {
                    cpp_str#push_back(
                        __data, '\a'
                    ) is_escape = false
                } else if ch == 'b' {
                    if is_ansi {
                        cpp_str#push_back(
                            collect, 'b'
                        )

                        is_escape = false
                        is_ansi   = false

                        continue
                    }

                    cpp_str#push_back(
                        __data, '\b'
                    ) is_escape = false
                } else if ch == 'f' {
                    cpp_str#push_back(
                        __data, '\f'
                    ) is_escape = false
                } else if ch == 'n' {
                    cpp_str#push_back(
                        __data, '\n'
                    ) is_escape = false
                } else if ch == 'r' {
                    cpp_str#push_back(
                        __data, '\r'
                    ) is_escape = false
                } else if ch == 't' {
                    cpp_str#push_back(
                        __data, '\t'
                    ) is_escape = false
                } else if ch == 'v' {
                    cpp_str#push_back(
                        __data, '\v'
                    ) is_escape = false
                } else if ch == 'w' {
                    cpp_str#push_back(
                        __data, '\w'
                    ) is_escape = false
                } else if ch == 'x' {
                    cpp_str#push_back(
                        collect, 'x'
                    ) is_ansi = true
                } else if ch == '0' {
                    if !is_ansi {
                        is_ansi = true
                    }

                    if is_ansi {
                        cpp_str#push_back(
                            collect, '0'
                        )
                    }
                } else if ch == '1' {
                    if is_ansi {
                        cpp_str#push_back(
                            collect, '1'
                        )
                    }
                } else if ch == '3' {
                    if str#last(collect) == '3' {
                        is_escape = false
                        is_ansi   = false
                    }

                    cpp_str#push_back(
                        collect, '3'
                    )
                } else {
                    is_escape = false
                } continue
            }

            if ch == '\\' {
                is_escape = true
                continue
            }

            cpp_str#push_back(__data, ch)
        } . __data
    }
} // escape
